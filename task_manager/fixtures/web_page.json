[
 {
  "breadcrumbs": null,
  "content_type": "HTML",
  "context_script": null,
  "css": "    /* Basic Styling Section */\n    body {\n        font-family: Arial, sans-serif;\n        max-width: 500px;\n        margin: 50px auto;\n        padding: 20px;\n        background-color: #f5f5f5;\n    }\n    \n    .form-container {\n        background: white;\n        padding: 30px;\n        border-radius: 8px;\n        box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n    }\n    \n    .form-group {\n        margin-bottom: 15px;\n    }\n    \n    label {\n        display: block;\n        margin-bottom: 5px;\n        font-weight: bold;\n        color: #333;\n    }\n    \n    input, select {\n        width: 100%;\n        padding: 10px;\n        border: 1px solid #ccc;\n        border-radius: 4px;\n        box-sizing: border-box;\n        font-size: 14px;\n    }\n    \n    input:focus, select:focus {\n        border-color: #007bff;\n        outline: none;\n        box-shadow: 0 0 5px rgba(0,123,255,0.3);\n    }\n    \n    button {\n        background-color: #007bff;\n        color: white;\n        padding: 12px 24px;\n        border: none;\n        border-radius: 4px;\n        cursor: pointer;\n        width: 100%;\n        font-size: 16px;\n        margin-top: 10px;\n    }\n    \n    button:hover {\n        background-color: #0056b3;\n    }\n    \n    button:disabled {\n        background-color: #6c757d;\n        cursor: not-allowed;\n    }\n    \n    .message {\n        padding: 10px;\n        margin: 10px 0;\n        border-radius: 4px;\n    }\n    \n    .success {\n        background-color: #d4edda;\n        color: #155724;\n        border: 1px solid #c3e6cb;\n    }\n    \n    .error {\n        background-color: #f8d7da;\n        color: #721c24;\n        border: 1px solid #f5c6cb;\n    }\n    \n    .loading {\n        background-color: #d1ecf1;\n        color: #0c5460;\n        border: 1px solid #bee5eb;\n    }",
  "docstatus": 0,
  "doctype": "Web Page",
  "dynamic_route": 0,
  "dynamic_template": 0,
  "enable_comments": 0,
  "end_date": null,
  "full_width": 1,
  "header": null,
  "insert_style": 1,
  "javascript": "// Global variables\n        let csrfToken = null;\n        \n        // DOM Loading and Initialization Section\n        document.addEventListener('DOMContentLoaded', function() {\n            initializeApp();\n        });\n        \n        async function initializeApp() {\n            await getCSRFToken();\n            await loadDesignations();\n            setupFormSubmission();\n            setupInteractiveFeedback();\n        }\n\n        // CSRF Token Management Section (unchanged from first file)\n        async function getCSRFToken() {\n            console.log('üîç Starting CSRF token detection...');\n            \n            try {\n                // Method 1: Check if Frappe provides global csrf_token variable\n                console.log('üìã Method 1: Checking global csrf_token variable...');\n                if (typeof csrf_token !== 'undefined' && csrf_token) {\n                    csrfToken = csrf_token;\n                    console.log('‚úÖ SUCCESS - Method 1: CSRF token found in global csrf_token variable');\n                    console.log('üîë Token preview:', csrf_token.substring(0, 20) + '...');\n                    return;\n                } else {\n                    console.log('‚ùå Method 1 failed: global csrf_token not found or empty');\n                }\n                \n                // Method 2: Check frappe.csrf_token if frappe object exists\n                console.log('üìã Method 2: Checking frappe.csrf_token...');\n                if (typeof frappe !== 'undefined' && frappe.csrf_token) {\n                    csrfToken = frappe.csrf_token;\n                    console.log('‚úÖ SUCCESS - Method 2: CSRF token found in frappe.csrf_token');\n                    console.log('üîë Token preview:', frappe.csrf_token.substring(0, 20) + '...');\n                    return;\n                } else {\n                    console.log('‚ùå Method 2 failed: frappe object not found or frappe.csrf_token empty');\n                }\n                \n                // Method 3: Try to get CSRF token from meta tag\n                console.log('üìã Method 3: Checking meta[name=\"csrf-token\"]...');\n                const metaTag = document.querySelector('meta[name=\"csrf-token\"]');\n                if (metaTag && metaTag.getAttribute('content')) {\n                    csrfToken = metaTag.getAttribute('content');\n                    console.log('‚úÖ SUCCESS - Method 3: CSRF token found in meta tag');\n                    console.log('üîë Token preview:', csrfToken.substring(0, 20) + '...');\n                    return;\n                } else {\n                    console.log('‚ùå Method 3 failed: meta[name=\"csrf-token\"] not found or empty');\n                }\n                \n                // Method 4: Check for X-Frappe-CSRF-Token meta tag\n                console.log('üìã Method 4: Checking meta[name=\"X-Frappe-CSRF-Token\"]...');\n                const frappeMetaTag = document.querySelector('meta[name=\"X-Frappe-CSRF-Token\"]');\n                if (frappeMetaTag && frappeMetaTag.getAttribute('content')) {\n                    csrfToken = frappeMetaTag.getAttribute('content');\n                    console.log('‚úÖ SUCCESS - Method 4: CSRF token found in X-Frappe-CSRF-Token meta tag');\n                    console.log('üîë Token preview:', csrfToken.substring(0, 20) + '...');\n                    return;\n                } else {\n                    console.log('‚ùå Method 4 failed: X-Frappe-CSRF-Token meta tag not found or empty');\n                }\n\n                // Method 5: Try to get CSRF token from cookie (Frappe format)\n                console.log('üìã Method 5: Checking cookies for CSRF token...');\n                const cookies = document.cookie.split(';');\n                console.log('üç™ Available cookies:', cookies.length);\n                \n                for (let cookie of cookies) {\n                    const [name, value] = cookie.trim().split('=');\n                    if (name === 'csrf_token' || name === 'csrftoken') {\n                        csrfToken = decodeURIComponent(value);\n                        console.log('‚úÖ SUCCESS - Method 5: CSRF token found in cookie:', name);\n                        console.log('üîë Token preview:', csrfToken.substring(0, 20) + '...');\n                        return;\n                    }\n                }\n                console.log('‚ùå Method 5 failed: No CSRF token found in cookies');\n                \n                // Method 6: Try to fetch from Frappe API\n                console.log('üìã Method 6: Attempting to fetch CSRF token from API...');\n                try {\n                    const response = await fetch('/api/method/frappe.sessions.get_csrf_token');\n                    if (response.ok) {\n                        const data = await response.json();\n                        if (data.message) {\n                            csrfToken = data.message;\n                            console.log('‚úÖ SUCCESS - Method 6: CSRF token obtained from API');\n                            console.log('üîë Token preview:', csrfToken.substring(0, 20) + '...');\n                            return;\n                        } else {\n                            console.log('‚ùå Method 6 failed: API returned empty message');\n                        }\n                    } else {\n                        console.log('‚ùå Method 6 failed: API request failed with status:', response.status);\n                    }\n                } catch (apiError) {\n                    console.log('‚ùå Method 6 failed: API request error:', apiError.message);\n                }\n\n                // If we get here, no CSRF token found\n                console.log('üö® ALL METHODS FAILED: No CSRF token found anywhere!');\n                console.warn('‚ö†Ô∏è CSRF token not found. POST requests may fail with CSRFTokenError.');\n                csrfToken = null;\n\n            } catch (error) {\n                console.error('üí• CRITICAL ERROR in getCSRFToken():', error);\n                csrfToken = null;\n            }\n            \n            // Final status report\n            if (csrfToken) {\n                console.log('üéâ CSRF Token Detection Complete - SUCCESS');\n            } else {\n                console.log('üòû CSRF Token Detection Complete - FAILED');\n            }\n        }\n\n        // API Functions Section (unchanged from first file)\n        async function loadDesignations() {\n            try {\n                console.log('Loading designations...');\n                showMessage('Loading designations...', 'loading');\n                \n                const response = await fetch('/api/method/task_manager.services.employeeform.get_designations');\n                \n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                \n                const data = await response.json();\n                console.log('Designations loaded:', data);\n                \n                populateDesignationDropdown(data);\n                clearMessage();\n                \n            } catch (error) {\n                console.error('Error loading designations:', error);\n                showMessage('Error loading designations. Please refresh the page.', 'error');\n            }\n        }\n\n        // UI Helper Functions Section\n        function populateDesignationDropdown(data) {\n            const selectElement = document.getElementById('designation');\n            \n            // Clear existing options except the first placeholder\n            selectElement.innerHTML = '<option value=\"\">Select designation</option>';\n            \n            // Handle the API response format\n            const designations = data.message || data;\n            \n            if (Array.isArray(designations)) {\n                designations.forEach(designation => {\n                    const option = document.createElement('option');\n                    option.value = designation.name || designation;\n                    option.textContent = designation.title || designation.name || designation;\n                    selectElement.appendChild(option);\n                });\n                \n                console.log(`Loaded ${designations.length} designations`);\n            } else {\n                console.error('Invalid designation data format:', designations);\n                showMessage('Invalid data format received for designations', 'error');\n            }\n        }\n\n        function showMessage(message, type) {\n            const messageArea = document.getElementById('messageArea');\n            messageArea.innerHTML = `<div class=\"message ${type}\">${message}</div>`;\n        }\n        \n        function clearMessage() {\n            const messageArea = document.getElementById('messageArea');\n            messageArea.innerHTML = '';\n        }\n\n        // Form Submission Section\n        function setupFormSubmission() {\n            const form = document.getElementById('employeeForm');\n            \n            form.addEventListener('submit', async function(event) {\n                event.preventDefault();\n                await submitEmployeeForm();\n            });\n        }\n\n        async function submitEmployeeForm() {\n            const submitBtn = document.getElementById('submitBtn');\n            const form = document.getElementById('employeeForm');\n            const originalText = submitBtn.textContent;\n            \n            try {\n                // Validate form data\n                const employeename = document.getElementById('employeename').value.trim();\n                const designation = document.getElementById('designation').value.trim();\n                \n                if (!employeename || !designation) {\n                    showMessage('Please fill in all required fields', 'error');\n                    return;\n                }\n                \n                // Show loading state\n                form.classList.add('form-loading');\n                submitBtn.disabled = true;\n                submitBtn.textContent = 'Submitting...';\n                showMessage('Adding employee...', 'loading');\n                \n                // Prepare form data\n                const formData = {\n                    employeename: employeename,\n                    designation: designation\n                };\n                \n                console.log('Submitting employee data:', formData);\n                \n                // Prepare headers\n                const headers = {\n                    'Content-Type': 'application/json'\n                };\n                \n                // Add CSRF token if available\n                if (csrfToken) {\n                    headers['X-Frappe-CSRF-Token'] = csrfToken;\n                }\n                \n                // Make POST request\n                const response = await fetch('/api/method/task_manager.services.employeeform.add_employee', {\n                    method: 'POST',\n                    headers: headers,\n                    body: JSON.stringify(formData)\n                });\n                \n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                \n                const result = await response.json();\n                console.log('Server response:', result);\n                \n                // Handle response\n                if (result.message && result.message.success) {\n                    showMessage('Employee added successfully!', 'success');\n                    document.getElementById('employeeForm').reset();\n                    // Reset visual feedback\n                    document.getElementById('employeename').style.borderColor = '#e1e5e9';\n                    document.getElementById('designation').style.borderColor = '#e1e5e9';\n                } else if (result.message) {\n                    const errorMsg = typeof result.message === 'string' ? result.message : 'Unknown error occurred';\n                    showMessage(`Error: ${errorMsg}`, 'error');\n                } else {\n                    showMessage('Unexpected response format', 'error');\n                }\n                \n            } catch (error) {\n                console.error('Error submitting form:', error);\n                \n                // Handle specific error types\n                if (error.message.includes('403') || error.message.includes('CSRF')) {\n                    showMessage('Security token expired. Please refresh the page and try again.', 'error');\n                } else if (error.message.includes('404')) {\n                    showMessage('API endpoint not found. Please check the configuration.', 'error');\n                } else if (error.message.includes('500')) {\n                    showMessage('Server error occurred. Please try again later.', 'error');\n                } else {\n                    showMessage('Error adding employee. Please try again.', 'error');\n                }\n            } finally {\n                // Reset button and form state\n                form.classList.remove('form-loading');\n                submitBtn.disabled = false;\n                submitBtn.textContent = originalText;\n            }\n        }\n\n        // Interactive Feedback Section\n        function setupInteractiveFeedback() {\n            const nameInput = document.getElementById('employeename');\n            const designationSelect = document.getElementById('designation');\n\n            nameInput.addEventListener('input', function() {\n                if (this.value.trim().length > 0) {\n                    this.style.borderColor = '#10b981';\n                } else {\n                    this.style.borderColor = '#e1e5e9';\n                }\n            });\n\n            designationSelect.addEventListener('change', function() {\n                if (this.value) {\n                    this.style.borderColor = '#10b981';\n                } else {\n                    this.style.borderColor = '#e1e5e9';\n                }\n            });\n\n            // Focus on name input when page loads\n            nameInput.focus();\n        }\n        \n        // Auto-hide success/loading messages\n        setInterval(() => {\n            const messageArea = document.getElementById('messageArea');\n            const messages = messageArea.querySelectorAll('.success, .loading');\n            messages.forEach(msg => {\n                if (msg.parentElement === messageArea) {\n                    setTimeout(() => {\n                        if (msg.parentElement === messageArea) {\n                            messageArea.removeChild(msg);\n                        }\n                    }, 3000);\n                }\n            });\n        }, 100);",
  "main_section": null,
  "main_section_html": "<div class=\"employee-form-wrapper\">\n        <div class=\"form-container\">\n            <!-- Form Header -->\n            <div class=\"form-header\">\n                <h1>Employee Registration</h1>\n                <p>Add new employee to the system</p>\n            </div>\n            \n            <!-- Form Section (keeping original IDs for JavaScript) -->\n            <form id=\"employeeForm\">\n                <div class=\"form-group\">\n                    <label for=\"employeename\">Employee Name *</label>\n                    <input \n                        type=\"text\" \n                        id=\"employeename\" \n                        name=\"employeename\" \n                        class=\"form-control\" \n                        placeholder=\"Enter employee's full name\"\n                        required\n                    >\n                </div>\n                \n                <div class=\"form-group\">\n                    <label for=\"designation\">Designation *</label>\n                    <select id=\"designation\" name=\"designation\" class=\"form-control\" required>\n                        <option value=\"\">Select designation</option>\n                        <!-- Options will be loaded dynamically from API -->\n                    </select>\n                </div>\n                \n                <button type=\"submit\" class=\"btn btn-primary\" id=\"submitBtn\">\n                    Submit Employee\n                </button>\n            </form>\n            \n            <!-- Message Display Area for API responses -->\n            <div id=\"messageArea\"></div>\n            \n            <div class=\"form-footer\">\n                <p>All fields marked with * are required</p>\n            </div>\n        </div>\n    </div>",
  "main_section_md": null,
  "meta_description": null,
  "meta_image": null,
  "meta_title": null,
  "modified": "2025-08-28 14:36:02.881618",
  "module": "Task Manager",
  "name": "employee-form-page",
  "page_blocks": [],
  "published": 1,
  "route": "employee-form-page",
  "show_sidebar": 0,
  "show_title": 0,
  "slideshow": null,
  "start_date": null,
  "text_align": "Left",
  "title": "Employee Form Page",
  "website_sidebar": null
 }
]